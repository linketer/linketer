---
layout: post
title: music
date: 2000-01-01 20:52:25 +0800
categories: music
tags: 
img: 
---
调整分类显示顺序用


<html>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>
</html>

这个练习对Numpy的几个基本函数进行了使用，同时对第二周所学的知识进行了复习和练习。  

## 关于 Jupyter Notebooks ##

After writing your code, you can run the cell by either pressing "SHIFT"+"ENTER" or by clicking on "Run Cell" (denoted by a play symbol) in the upper bar of the notebook.

## 1 - Building basic functions with numpy ##
### 1.1 - sigmoid function, np.exp() ###

这里用numpy包里的exp()函数实现了$sigmoid(x) = \frac{1}{1+e^{-x}}$ 。值得一提的是，在深度学习编程中，我们很少会用math库里的exp()函数（包括其他函数），因为无法对向量（矩阵）进行运算。

```python
# GRADED FUNCTION: sigmoid

import numpy as np # this means you can access numpy functions by writing np.function() instead of numpy.function()

def sigmoid(x):
    """
    Compute the sigmoid of x

    Arguments:
    x -- A scalar or numpy array of any size

    Return:
    s -- sigmoid(x)
    """
    
    ### START CODE HERE ### (≈ 1 line of code)
    s = 1/(1 + np.exp(-x))
    ### END CODE HERE ###
    
    return s
```


### 1.2 - Sigmoid gradient
因为我们之后会使用反向传播的过程（计算梯度/导数）来最优化损失函数，也就是求导了，这里我们构造了Sigmoid函数对于任意x求导（任一点的梯度）的方程。 The formula is: $$sigmoid\_derivative(x) = \sigma'(x) = \sigma(x) (1 - \sigma(x))\tag{2}$$
```python
# GRADED FUNCTION: sigmoid_derivative

def sigmoid_derivative(x):
    """
    Compute the gradient (also called the slope or derivative) of the sigmoid function with respect to its input x.
    You can store the output of the sigmoid function into variables and then use it to calculate the gradient.
    
    Arguments:
    x -- A scalar or numpy array

    Return:
    ds -- Your computed gradient.
    """
    
    ### START CODE HERE ### (≈ 2 lines of code)
    s = sigmoid(x)
    ds = s*(1 - s)
    ### END CODE HERE ###
    
    return ds
```

### 1.3 - Reshaping arrays ###
 Implement image2vector() that takes an input of shape (length, height, 3) and returns a vector of shape (length\*height\*3, 1). 
 
 Two common numpy functions used in deep learning are [np.shape](https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.shape.html) and [np.reshape()](https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html). 
- X.shape is used to get the shape (dimension) of a matrix/vector X. 
- X.reshape(...) is used to reshape X into some other dimension. 
```python
# GRADED FUNCTION: image2vector
def image2vector(v):
    """
    Argument:
    image -- a numpy array of shape (length, height, depth)
    
    Returns:
    v -- a vector of shape (length*height*depth, 1)
    """
    
    ### START CODE HERE ### (≈ 1 line of code)
    v = v.reshape((v.shape[0]*v.shape[1]*v.shape[2],1))
    ### END CODE HERE ###
    
    return v
```

### 1.4 - Normalizing rows

### 1.4 - Normalizing rows

Another common technique we use in Machine Learning and Deep Learning is to normalize our data. It often leads to a better performance because gradient descent converges faster after normalization. Here, by normalization we mean changing x to $ \frac{x}{\| x\|} $ (dividing each row vector of x by its norm).

For example, if $$x = 
\begin{bmatrix}
    0 & 3 & 4 \\
    2 & 6 & 4 \\
\end{bmatrix}\tag{3}$$ then $$\| x\| = np.linalg.norm(x, axis = 1, keepdims = True) = \begin{bmatrix}
    5 \\
    \sqrt{56} \\
\end{bmatrix}\tag{4} $$and        $$ x\_normalized = \frac{x}{\| x\|} = \begin{bmatrix}
    0 & \frac{3}{5} & \frac{4}{5} \\
    \frac{2}{\sqrt{56}} & \frac{6}{\sqrt{56}} & \frac{4}{\sqrt{56}} \\
\end{bmatrix}\tag{5}$$ Note that you can divide matrices of different sizes and it works fine: this is called broadcasting and you're going to learn about it in part 5.

```python
# GRADED FUNCTION: normalizeRows

def normalizeRows(x):
    """
    Implement a function that normalizes each row of the matrix x (to have unit length).
    
    Argument:
    x -- A numpy matrix of shape (n, m)
    
    Returns:
    x -- The normalized (by row) numpy matrix. You are allowed to modify x.
    """
    
    ### START CODE HERE ### (≈ 2 lines of code)
    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)
    x_norm = np.linalg.norm(x,axis=1,keepdims=True)
    
    # Divide x by its norm.
    x = x/x_norm
    ### END CODE HERE ###

    return x
```
### 1.5 - Broadcasting and the softmax function ####
```python

```
## 2) Vectorization
### 2.1 Implement the L1 and L2 loss functions
```python

```



<html>
<font color='blue'>
<b>What you need to remember</b>
<ul> 
    <li>导入指定包用import package_name as shortcut，as后可以给一个别称</li> 
    <li>调用指定库的函数用package_name.function()</li> 
    <li>np.exp()可以对向量进行计算，math.exp()不可以。机器学习中一般不使用math.exp()。</li> 
</ul>
</font>
</html>

```python

```
```python

```
```python

```
```python

```
```python

```
```python

```
```python

```
```python

```
```python

```
```python

```